# SPDX-FileCopyrightText: 2022 Dennis Gl√§ser <dennis.glaeser@iws.uni-stuttgart.de>
# SPDX-License-Identifier: GPL-3.0-or-later

name: test-suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 22 * * 0'
  workflow_dispatch:

env:
  DEFAULT_COMPILER_PKG: g++-12
  DEFAULT_C_COMPILER: gcc-12
  DEFAULT_CXX_COMPILER: g++-12

jobs:
  test-compilers:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler_pkg: [g++-12]
        include:
           - c_compiler: gcc-12
             compiler_pkg: g++-12
           - cxx_compiler: g++-12
             compiler_pkg: g++-12

    steps:
      - name: checkout-repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: check-reuse-compliance
        run: python3 -m pip install reuse && reuse lint

      - name: install-dependencies
        uses: ./.github/actions/install-dependencies
        with:
          compiler: ${{ matrix.compiler_pkg }}

      - name: install-adapted-packages
        uses: ./.github/actions/install-adapted-packages

      - name: configure
        run: |
          rm -rf build
          cmake -DCMAKE_C_COMPILER=${{matrix.c_compiler}} \
                -DCMAKE_CXX_COMPILER=${{matrix.cxx_compiler}} \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_PREFIX_PATH=/gridformat-manually-installed-deps \
                -DGRIDFORMAT_BUILD_TESTS=ON \
                -B build | tee gfmt_cmake_log.txt

      - name: check-documentation-code
        run: |
          GFMT_TREE=$GITHUB_HEAD_REF
          if [[ -z "$GFMT_TREE" ]]; then
            GFMT_TREE=$GITHUB_SHA
          fi
          python3 test/test_readme_quick_start.py -b ${GFMT_TREE} -e "-DCMAKE_C_COMPILER=/usr/bin/gcc-12 -DCMAKE_CXX_COMPILER=/usr/bin/g++-12"
          python3 test/test_readme_tested_versions.py --cmake-log-file gfmt_cmake_log.txt

      - name: build-tests
        run: pushd build && make build_tests && popd

      - name: test
        run: |
          pushd build && ctest --output-on-failure && popd


  mem-check:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout-repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: install-dependencies
        uses: ./.github/actions/install-dependencies
        with:
          compiler: $DEFAULT_COMPILER_PKG

      - name: install-adapted-packages
        uses: ./.github/actions/install-adapted-packages

      - name: run-valgrind
        run: |
          sudo apt install valgrind
          rm -rf build
          cmake -DCMAKE_C_COMPILER=/usr/bin/$DEFAULT_C_COMPILER \
                -DCMAKE_CXX_COMPILER=/usr/bin/$DEFAULT_CXX_COMPILER \
                -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_PREFIX_PATH=/gridformat-manually-installed-deps \
                -DGRIDFORMAT_BUILD_TESTS=ON \
                -B build
          cd build && make memcheck


  test-full-installation:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout-repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: install-dependencies
        uses: ./.github/actions/install-dependencies
        with:
          compiler: $DEFAULT_COMPILER_PKG

      - name: install-adapted-packages
        uses: ./.github/actions/install-adapted-packages

      - name: test-installed-package
        uses: ./.github/actions/test-installed-pkg
        with:
          c_compiler: /usr/bin/$DEFAULT_C_COMPILER
          cxx_compiler: /usr/bin/$DEFAULT_CXX_COMPILER


  test-minimal-installation:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout-repository
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: remove-optional-dependencies
        run: sudo apt remove liblz4-dev liblzma-dev

      - name: install-compiler
        run: sudo apt install $DEFAULT_COMPILER_PKG

      - name: install-vtk
        run: python3 -m pip install vtk

      - name: test-installed-package
        uses: ./.github/actions/test-installed-pkg
        with:
          c_compiler: /usr/bin/$DEFAULT_C_COMPILER
          cxx_compiler: /usr/bin/$DEFAULT_CXX_COMPILER
